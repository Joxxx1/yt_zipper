#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
自动获取YouTube cookies的Python脚本
支持从Chrome、Firefox、Edge等浏览器获取cookies
"""

import os
import sys
import time
from pathlib import Path

def check_browser_cookie3():
    """检查是否安装了browser_cookie3库"""
    try:
        import browser_cookie3
        return True
    except ImportError:
        print("❌ 未安装browser_cookie3库")
        print("💡 请运行: pip install browser_cookie3")
        return False

def get_chrome_cookies():
    """从Chrome浏览器获取cookies"""
    try:
        import browser_cookie3
        
        print("🔍 正在从Chrome浏览器获取cookies...")
        cookies = browser_cookie3.chrome(domain_name='.youtube.com')
        
        if not cookies:
            print("⚠️ 未找到YouTube cookies，请确保已登录YouTube")
            return False
        
        return export_cookies(cookies, "Chrome")
        
    except Exception as e:
        print(f"❌ 从Chrome获取cookies失败: {e}")
        return False

def get_firefox_cookies():
    """从Firefox浏览器获取cookies"""
    try:
        import browser_cookie3
        
        print("🔍 正在从Firefox浏览器获取cookies...")
        cookies = browser_cookie3.firefox(domain_name='.youtube.com')
        
        if not cookies:
            print("⚠️ 未找到YouTube cookies，请确保已登录YouTube")
            return False
        
        return export_cookies(cookies, "Firefox")
        
    except Exception as e:
        print(f"❌ 从Firefox获取cookies失败: {e}")
        return False

def get_edge_cookies():
    """从Edge浏览器获取cookies"""
    try:
        import browser_cookie3
        
        print("🔍 正在从Edge浏览器获取cookies...")
        cookies = browser_cookie3.edge(domain_name='.youtube.com')
        
        if not cookies:
            print("⚠️ 未找到YouTube cookies，请确保已登录YouTube")
            return False
        
        return export_cookies(cookies, "Edge")
        
    except Exception as e:
        print(f"❌ 从Edge获取cookies失败: {e}")
        return False

def export_cookies(cookies, browser_name):
    """导出cookies到文件"""
    try:
        # 创建cookies.txt文件
        with open('cookies.txt', 'w', encoding='utf-8') as f:
            f.write('# Netscape HTTP Cookie File\n')
            f.write('# https://curl.se/rfc/cookie_spec.html\n')
            f.write(f'# This file was generated by get_cookies.py from {browser_name}\n')
            f.write(f'# Generated at: {time.strftime("%Y-%m-%d %H:%M:%S")}\n\n')
            
            cookie_count = 0
            for cookie in cookies:
                # 检查是否是YouTube相关的cookie
                if 'youtube.com' in cookie.domain or 'google.com' in cookie.domain:
                    f.write(f'{cookie.domain}\tTRUE\t{cookie.path}\t'
                           f'{"TRUE" if cookie.secure else "FALSE"}\t{cookie.expires}\t'
                           f'{cookie.name}\t{cookie.value}\n')
                    cookie_count += 1
        
        print(f"✅ 成功导出 {cookie_count} 个cookies到cookies.txt")
        print(f"📁 文件位置: {os.path.abspath('cookies.txt')}")
        return True
        
    except Exception as e:
        print(f"❌ 导出cookies失败: {e}")
        return False

def verify_cookies_file():
    """验证cookies.txt文件"""
    try:
        if not os.path.exists('cookies.txt'):
            print("❌ cookies.txt文件不存在")
            return False
        
        with open('cookies.txt', 'r', encoding='utf-8') as f:
            content = f.read()
        
        # 检查文件大小
        file_size = os.path.getsize('cookies.txt')
        if file_size < 100:
            print("⚠️ cookies.txt文件太小，可能不包含有效cookies")
            return False
        
        # 检查是否包含YouTube相关cookies
        if 'youtube.com' in content:
            print("✅ cookies.txt文件格式正确")
            print("✅ 包含YouTube cookies")
            print(f"📊 文件大小: {file_size} 字节")
            return True
        else:
            print("⚠️ cookies.txt文件可能不包含YouTube cookies")
            return False
            
    except Exception as e:
        print(f"❌ 验证失败: {e}")
        return False

def show_manual_guide():
    """显示手动获取指南"""
    print("\n📖 手动获取cookies指南:")
    print("1. 安装浏览器扩展 'Get cookies.txt LOCALLY'")
    print("2. 访问 https://www.youtube.com 并登录")
    print("3. 点击扩展图标导出cookies")
    print("4. 将导出的文件重命名为 cookies.txt")
    print("5. 放在项目根目录")
    print("\n💡 详细说明请查看 COOKIES_SETUP_GUIDE.md")

def main():
    """主函数"""
    print("🍪 YouTube Cookies获取工具")
    print("=" * 40)
    
    # 检查依赖
    if not check_browser_cookie3():
        show_manual_guide()
        return
    
    print("\n📋 请选择浏览器:")
    print("1. Chrome (推荐)")
    print("2. Firefox")
    print("3. Edge")
    print("4. 手动获取指南")
    print("5. 验证现有cookies.txt文件")
    print("6. 退出")
    
    while True:
        choice = input("\n请选择 (1-6): ").strip()
        
        if choice == "1":
            if get_chrome_cookies():
                verify_cookies_file()
            break
        elif choice == "2":
            if get_firefox_cookies():
                verify_cookies_file()
            break
        elif choice == "3":
            if get_edge_cookies():
                verify_cookies_file()
            break
        elif choice == "4":
            show_manual_guide()
            break
        elif choice == "5":
            verify_cookies_file()
            break
        elif choice == "6":
            print("👋 退出程序")
            break
        else:
            print("❌ 无效选择，请重新输入")
    
    print("\n💡 提示:")
    print("- cookies.txt文件已创建，可以开始使用下载器")
    print("- 如果下载失败，请重新获取cookies")
    print("- 建议每周更新一次cookies文件")
    print("- 不要分享您的cookies.txt文件")

if __name__ == "__main__":
    main()
